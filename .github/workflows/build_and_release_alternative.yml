name: Build and Release APKs (Alternative)

on:
  release:
    types: [created, published]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to build from'
        required: false
        type: string
      create_release:
        description: 'Create a new release if one does not exist'
        required: false
        type: boolean
        default: false

env:
  FLUTTER_VERSION: '3.13.0'
  JAVA_VERSION: '11'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.release.tag_name || inputs.tag_name || github.ref }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Verify Flutter installation
        run: |
          flutter --version
          flutter doctor -v
          echo "Current directory: $(pwd)"
          echo "Contents: $(ls -la)"

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            **/.packages
            **/.flutter-plugins
            **/.flutter-plugin-dependencies
            **/.dart_tool
          key: flutter-${{ hashFiles('**/pubspec.lock', 'packages/**/pubspec.yaml') }}
          restore-keys: |
            flutter-${{ hashFiles('**/pubspec.lock') }}
            flutter-

      - name: Install dependencies
        run: |
          echo "Installing dependencies for local packages first..."
          
          # Install dependencies for local packages
          for package_dir in packages/*/; do
            if [ -f "$package_dir/pubspec.yaml" ]; then
              echo "Installing dependencies for $package_dir"
              cd "$package_dir"
              flutter pub get
              cd ../..
            fi
          done
          
          echo "Installing main project dependencies..."
          flutter pub get

      - name: Setup keystore
        if: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > android/app/keystore.jks
          cat > android/key.properties << EOF
          storePassword=${{ secrets.STORE_PASSWORD }}
          keyPassword=${{ secrets.KEY_PASSWORD }}
          keyAlias=${{ secrets.KEY_ALIAS }}
          storeFile=keystore.jks
          EOF

      - name: Build APKs
        run: |
          if [ -f "android/key.properties" ]; then
            echo "Building signed release APKs"
            flutter build apk --split-per-abi --release
            BUILD_TYPE="release"
          else
            echo "Building debug APKs (no keystore configured)"
            flutter build apk --split-per-abi --debug
            BUILD_TYPE="debug"
          fi
          echo "BUILD_TYPE=$BUILD_TYPE" >> $GITHUB_ENV

      - name: Prepare APK names
        id: apk_names
        run: |
          TAG_NAME="${{ github.event.release.tag_name || inputs.tag_name || 'latest' }}"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "arm64_name=diaryvault-arm64-v8a-$TAG_NAME.apk" >> $GITHUB_OUTPUT
          echo "armv7_name=diaryvault-armeabi-v7a-$TAG_NAME.apk" >> $GITHUB_OUTPUT
          echo "x86_name=diaryvault-x86_64-$TAG_NAME.apk" >> $GITHUB_OUTPUT

      - name: Rename APKs
        run: |
          cd build/app/outputs/flutter-apk/
          mv app-arm64-v8a-${{ env.BUILD_TYPE }}.apk ${{ steps.apk_names.outputs.arm64_name }}
          mv app-armeabi-v7a-${{ env.BUILD_TYPE }}.apk ${{ steps.apk_names.outputs.armv7_name }}
          mv app-x86_64-${{ env.BUILD_TYPE }}.apk ${{ steps.apk_names.outputs.x86_name }}
          ls -la

      - name: Create release if needed
        if: ${{ inputs.create_release }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ inputs.tag_name || github.ref_name }}"
          if ! gh release view "$TAG_NAME" > /dev/null 2>&1; then
            echo "Creating release for tag $TAG_NAME"
            gh release create "$TAG_NAME" \
              --title "Release $TAG_NAME" \
              --notes "Automated release for tag $TAG_NAME" \
              --draft=false \
              --prerelease=false
          else
            echo "Release $TAG_NAME already exists"
          fi

      - name: Upload APKs to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ steps.apk_names.outputs.tag_name }}"
          cd build/app/outputs/flutter-apk/
          
          echo "Uploading APKs to release $TAG_NAME"
          gh release upload "$TAG_NAME" \
            ${{ steps.apk_names.outputs.arm64_name }} \
            ${{ steps.apk_names.outputs.armv7_name }} \
            ${{ steps.apk_names.outputs.x86_name }} \
            --clobber

      - name: Upload APKs as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: diaryvault-apks-${{ steps.apk_names.outputs.tag_name }}
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 30

      - name: Summary
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** ${{ steps.apk_names.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type:** ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
          echo "- **APKs Built:**" >> $GITHUB_STEP_SUMMARY
          echo "  - ${{ steps.apk_names.outputs.arm64_name }}" >> $GITHUB_STEP_SUMMARY
          echo "  - ${{ steps.apk_names.outputs.armv7_name }}" >> $GITHUB_STEP_SUMMARY
          echo "  - ${{ steps.apk_names.outputs.x86_name }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "android/key.properties" ]; then
            echo "- **Signing:** ✅ Signed with keystore" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Signing:** ⚠️ Debug build (no keystore)" >> $GITHUB_STEP_SUMMARY
          fi
